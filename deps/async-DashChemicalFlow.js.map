{"version":3,"file":"async-ChemicalFlow.js","mappings":"qSASA,IAAMA,EAAmB,SAACC,GACtB,I,IAAOC,EAA8BD,EAA9BC,GAAIC,EAA0BF,EAA1BE,MAAOC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,MACyBC,G,GAAfC,EAAAA,EAAAA,WAAS,G,EAAM,E,k5BAA9CC,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GASlC,OAPAI,EAAAA,EAAAA,YAAU,WACNC,OAAOC,kBAAkBC,MAAK,SAACC,GAC3BH,OAAOI,MAAQD,EACfL,GAAe,EACnB,GACJ,GAAG,IAGCO,IAAAA,cAAA,OAAKd,GAAIA,GAAI,qBACUC,EAAM,IAE7Ba,IAAAA,cAAA,WACKR,EACOQ,IAAAA,cAAA,QACIC,wBAAyB,CAC7BC,OAAQP,OAAOI,MAAMI,QAAQ,OAAOC,aAIhD,cAGIJ,IAAAA,cAAA,aAAO,eACPA,IAAAA,cAAA,OAAKd,GAAG,mBAAmBmB,UAAU,gBACrCL,IAAAA,cAAA,cAAQ,sBAIRA,IAAAA,cAAA,SACIX,MAAOA,EACPiB,SAUI,SAAAC,GAAC,OAAInB,EAAS,CAACC,MAAOkB,EAAEC,OAAOnB,OAAO,IAK1D,EAEAL,EAAiByB,aAAe,CAAC,EAEjCzB,EAAiB0B,UAAY,CAIzBxB,GAAIyB,IAAAA,OAKJxB,MAAOwB,IAAAA,OAAiBC,WAKxBvB,MAAOsB,IAAAA,OAMPvB,SAAUuB,IAAAA,MAGd,S","sources":["webpack:///./src/lib/fragments/ChemicalFlow.react.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nconst ChemicalFlow = (props) => {\n    const {id, label, setProps, value} = props;\n    const [rdkitLoaded, setRdkitLoaded] = useState(false);\n\n    useEffect(() => {\n        window.initRDKitModule().then((rdkit) => {\n            window.RDKit = rdkit;\n            setRdkitLoaded(true);\n        });\n    }, []);\n\n    return (\n        <div id={id}>\n            ExampleComponent: {label}&nbsp;\n\n        <div>\n            {rdkitLoaded ? (\n                    <span\n                        dangerouslySetInnerHTML={{\n                    __html: window.RDKit.get_mol(\"CCO\").get_svg(),\n                }}\n    />\n) : (\n        \"Loading...\"\n    )}\n        </div>\n            <label>bbbbbbbbbbb</label>\n            <div id=\"example-1-output\" className=\"ml-6 column\"></div>\n            <script>\n               console.log(\"aaa\")\n            </script>\n\n            <input\n                value={value}\n                onChange={\n                    /*\n                        * Send the new value to the parent component.\n                        * setProps is a prop that is automatically supplied\n                        * by dash's front-end (\"dash-renderer\").\n                        * In a Dash app, this will update the component's\n                        * props and send the data back to the Python Dash\n                        * app server if a callback uses the modified prop as\n                        * Input or State.\n                        */\n                    e => setProps({value: e.target.value})\n                }\n            />\n        </div>\n    );\n}\n\nChemicalFlow.defaultProps = {};\n\nChemicalFlow.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * A label that will be printed when this component is rendered.\n     */\n    label: PropTypes.string.isRequired,\n\n    /**\n     * The value displayed in the input.\n     */\n    value: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func\n};\n\nexport default ChemicalFlow;\n"],"names":["ChemicalFlow","props","id","label","setProps","value","_useState2","useState","rdkitLoaded","setRdkitLoaded","useEffect","window","initRDKitModule","then","rdkit","RDKit","React","dangerouslySetInnerHTML","__html","get_mol","get_svg","className","onChange","e","target","defaultProps","propTypes","PropTypes","isRequired"],"sourceRoot":""}